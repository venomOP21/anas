module 0x674015592cfcd10684f624a02b50db82cfeb64049e63e1c269ab2df76a46f1f3 {

    // Define a struct for storing user balances
    struct UserBalance has key {
        balance: u64,
    }

    // Initialize a user's account with a balance of 0
    public fun init_user(account: &signer) {
        move_to(account, UserBalance { balance: 0 });
    }

    // Function to add funds to a user's balance
    public fun add_funds(account: &signer, amount: u64) {
        let user_balance = borrow_global_mut<UserBalance>(signer::address_of(account));
        user_balance.balance = user_balance.balance + amount;
    }

    // Function to transfer funds from one user to another
    public fun transfer_funds(sender: &signer, recipient: address, amount: u64) {
        let sender_balance = borrow_global_mut<UserBalance>(signer::address_of(sender));
        assert!(sender_balance.balance >= amount, 1); // Ensure sender has enough funds
        let recipient_balance = borrow_global_mut<UserBalance>(recipient);
        sender_balance.balance = sender_balance.balance - amount;
        recipient_balance.balance = recipient_balance.balance + amount;
    }

    // Function to check a user's balance
    public fun get_balance(account: &signer): u64 {
        let user_balance = borrow_global<UserBalance>(signer::address_of(account));
        user_balance.balance
    }
}